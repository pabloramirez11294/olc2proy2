/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,23],$V2=[1,21],$V3=[1,22],$V4=[1,8],$V5=[1,9],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,20],$Vc=[1,26],$Vd=[1,27],$Ve=[1,24],$Vf=[1,25],$Vg=[2,5,10,11,22,29,31,33,39,40,41,42,46,50,51,52,56],$Vh=[2,5,10,11,15,22,29,31,33,39,40,41,42,46,50,51,52,56,59,60],$Vi=[1,35],$Vj=[1,49],$Vk=[1,59],$Vl=[1,44],$Vm=[1,50],$Vn=[1,43],$Vo=[1,42],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,57],$Vv=[1,61],$Vw=[1,64],$Vx=[1,62],$Vy=[1,63],$Vz=[1,72],$VA=[1,75],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[11,15,16,17,20,25,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],$VS=[11,15],$VT=[16,20],$VU=[2,67],$VV=[1,127],$VW=[1,126],$VX=[1,131],$VY=[1,130],$VZ=[1,133],$V_=[20,25,49],$V$=[2,5,10,11,15,22,29,31,33,39,40,41,42,46,50,51,52,54,56,59,60],$V01=[11,15,29,31,33,39,40,41,42,46,50,51,52,56,59,60],$V11=[11,15,16,17,20,25,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85],$V21=[1,174],$V31=[2,5,10,11,13,15,22,23,29,31,33,39,40,41,42,46,48,50,51,52,56,59,60,71,86,89,90,91,92,93,94],$V41=[1,184],$V51=[1,180],$V61=[1,181],$V71=[1,182],$V81=[1,183],$V91=[11,15,16,17,20,25,49,70,71,76,77,78,79,80,81,82,83,85],$Va1=[11,15,16,17,20,25,49,70,71,73,74,75,76,77,78,79,80,81,82,83,85],$Vb1=[11,15,16,17,20,25,49,76,77,78,79,80,81,82,83,85],$Vc1=[11,15,16,17,20,25,49,80,81,82,83,85],$Vd1=[12,48],$Ve1=[20,25],$Vf1=[1,211],$Vg1=[11,12,13,15,16,20,25,48],$Vh1=[11,15,16,17,20,25,48,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],$Vi1=[1,234],$Vj1=[2,13],$Vk1=[1,244],$Vl1=[1,243],$Vm1=[12,16,20,25,48],$Vn1=[2,51],$Vo1=[15,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Contenido":4,"EOF":5,"Cont":6,"Instruc":7,"Funciones":8,"Types":9,"TYPE":10,"ID":11,"=":12,"{":13,"ListTypes":14,"}":15,";":16,":":17,"Tipo":18,"Fin":19,",":20,"Instrucciones":21,"FUNCTION":22,"(":23,"Parametros":24,")":25,"InstruccionesSent":26,"OpcionParam":27,"Dim":28,"CONSOLE":29,"Expre":30,"GRAFICARTS":31,"Sentencia_if":32,"FOR":33,"Declaracion":34,"Exp":35,"Actualizacion":36,"DeclaForOF":37,"OF":38,"WHILE":39,"DO":40,"BREAK":41,"CONTINUE":42,"Sent_switch":43,"Unario":44,"Llamada":45,"RETURN":46,"AccesoAsig":47,"[":48,"]":49,"LET":50,"CONST":51,"IF":52,"Sentencia_else":53,"ELSE":54,"InstruccionesSwitch":55,"SWITCH":56,"Cases":57,"Default":58,"CASE":59,"DEFAULT":60,"ListaDeclaracion":61,"ListaDeclaracionConst":62,"OpcionDeclaracion":63,"OpcionDeclaracionConst":64,"Dimensiones":65,"NUMBER":66,"STRING":67,"BOOLEAN":68,"VOID":69,"+":70,"-":71,"**":72,"%":73,"*":74,"/":75,">":76,"<":77,">=":78,"<=":79,"==":80,"!=":81,"&&":82,"||":83,".":84,"?":85,"!":86,"AccesoArr":87,"F":88,"NUMERO":89,"CADENA":90,"CADENA2":91,"TRUE":92,"FALSE":93,"NULL":94,"LENGTH":95,"TypesExp":96,"++":97,"--":98,"ListTypesExp":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"TYPE",11:"ID",12:"=",13:"{",15:"}",16:";",17:":",20:",",22:"FUNCTION",23:"(",25:")",29:"CONSOLE",31:"GRAFICARTS",33:"FOR",38:"OF",39:"WHILE",40:"DO",41:"BREAK",42:"CONTINUE",46:"RETURN",48:"[",49:"]",50:"LET",51:"CONST",52:"IF",54:"ELSE",56:"SWITCH",59:"CASE",60:"DEFAULT",66:"NUMBER",67:"STRING",68:"BOOLEAN",69:"VOID",70:"+",71:"-",72:"**",73:"%",74:"*",75:"/",76:">",77:"<",78:">=",79:"<=",80:"==",81:"!=",82:"&&",83:"||",84:".",85:"?",86:"!",89:"NUMERO",90:"CADENA",91:"CADENA2",92:"TRUE",93:"FALSE",94:"NULL",95:"LENGTH",97:"++",98:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[9,7],[14,5],[14,0],[19,1],[19,1],[19,0],[21,2],[21,1],[8,8],[8,7],[8,6],[8,5],[24,3],[24,1],[27,4],[27,3],[7,5],[7,4],[7,1],[7,8],[7,7],[7,5],[7,7],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,3],[7,2],[7,5],[47,4],[47,3],[37,2],[37,2],[32,6],[53,2],[53,2],[53,0],[26,3],[26,2],[55,1],[55,0],[43,8],[57,5],[57,4],[58,3],[58,0],[36,1],[36,4],[34,3],[34,4],[34,3],[61,3],[61,1],[63,5],[63,3],[63,3],[63,1],[63,6],[63,4],[64,5],[64,3],[64,6],[28,3],[28,2],[65,2],[65,3],[62,3],[62,1],[45,3],[45,4],[30,3],[30,1],[18,1],[18,1],[18,1],[18,1],[18,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,5],[35,2],[35,2],[35,3],[35,1],[35,1],[35,1],[35,1],[87,4],[87,4],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,3],[88,1],[44,2],[44,2],[96,3],[99,5],[99,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 14:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 15: case 82:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6:
 this.$ = $$[$0]; 
break;
case 7:
 
            //console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
            this.$= new Error_(this._$.first_line , this._$.first_column, 'Sintáctico',yytext,'');
        
break;
case 20:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 21:

            this.$ = [$$[$0]];
        
break;
case 40:

            this.$.push($$[$0-1]);
        
break;
case 41:

            this.$ =[$$[$0-1]]
        
break;
case 58:

                this.$ = new Declaracion($$[$0-3],undefined,$$[$0-1],true, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 62: case 77:
 $$[$0-2].push($$[$0]); 
break;
case 63: case 78:
 this.$ = [$$[$0]]; 
break;
case 73:

                 this.$=$$[$0-2]+1;
            
break;
case 74:

                this.$ =1;
            
break;
case 81:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 106:

        this.$ = $$[$0-1];
    
break;
case 107:
 this.$ = $$[$0]
break;
case 108:
  this.$ = $$[$0]; 
break;
case 109: case 110: case 119:

        this.$ = $$[$0];
    
break;
case 114:

        let txt=$$[$0].replace(/\\n/g,"\n");
        txt = txt.replace(/\\t/g,"\t");
        txt = txt.replace(/\\r/g,"\r");
        //this.$ = new Literal(txt.replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 115:

        let txt2=$$[$0].replace(/\\n/g,"\n");
        txt2 = txt2.replace(/\\t/g,"\t");
        txt2 = txt2.replace(/\\r/g,"\r");
        //this.$ = new Literal(txt2.replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:$V2,22:$V3,29:$V4,31:$V5,32:10,33:$V6,34:17,39:$V7,40:$V8,41:$V9,42:$Va,43:16,44:18,45:19,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,8:5,9:6,10:$V1,11:$V2,22:$V3,29:$V4,31:$V5,32:10,33:$V6,34:17,39:$V7,40:$V8,41:$V9,42:$Va,43:16,44:18,45:19,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),{23:[1,30]},{23:[1,31]},o($Vh,[2,26]),{23:[1,32]},{23:[1,33]},{13:$Vi,26:34},{16:[1,36]},{16:[1,37]},o($Vh,[2,33]),o($Vh,[2,34]),{16:[1,38]},{16:[1,39]},{11:$Vj,13:$Vk,16:[1,41],23:$Vl,35:40,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{12:$Vv,23:$Vw,47:60,48:[1,65],97:$Vx,98:$Vy},{11:[1,66]},{11:[1,67]},{23:[1,68]},{23:[1,69]},{11:$Vz,61:70,63:71},{11:$VA,62:73,64:74},{1:[2,1]},o($Vg,[2,2]),{11:$Vj,13:$Vk,23:$Vl,30:76,35:77,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{25:[1,78]},{11:[1,82],34:79,37:80,50:[1,81],51:[1,83]},{11:$Vj,13:$Vk,23:$Vl,35:84,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{39:[1,85]},{7:88,11:$V2,15:[1,87],21:86,29:$V4,31:$V5,32:10,33:$V6,34:17,39:$V7,40:$V8,41:$V9,42:$Va,43:16,44:18,45:19,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf},o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,35]),o($Vh,[2,36]),{16:[1,89],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($Vh,[2,38]),{11:$Vj,13:$Vk,23:$Vl,35:106,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:107,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:108,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VR,[2,107]),o($VR,[2,108]),o($VR,[2,109],{48:[1,109]}),o($VR,[2,110]),o($VR,[2,118],{23:$Vw,48:[1,110],97:$Vx,98:$Vy}),{11:$Vj,13:$Vk,23:$Vl,30:112,35:77,44:45,45:56,48:$Vm,49:[1,111],65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VR,[2,113]),o($VR,[2,114]),o($VR,[2,115]),o($VR,[2,116]),o($VR,[2,117]),o($VR,[2,119]),o($VR,[2,120]),o($VR,[2,122]),o($VS,[2,127],{99:113}),{12:[1,114],48:[1,115]},{11:$Vj,13:$Vk,23:$Vl,35:116,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VR,[2,123]),o($VR,[2,124]),{11:$Vj,13:$Vk,23:$Vl,25:[1,117],30:118,35:77,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:119,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{23:[1,120]},{12:[1,121]},{11:$Vj,13:$Vk,23:$Vl,35:122,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:123,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{16:[1,124],20:[1,125]},o($VT,[2,63]),o($VT,$VU,{12:$VV,17:$VW}),{16:[1,128],20:[1,129]},o($VT,[2,78]),{12:$VX,17:$VY},{20:$VZ,25:[1,132]},o($V_,[2,82],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{16:[1,134]},{11:$Vj,13:$Vk,23:$Vl,35:135,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{38:[1,136]},{11:[1,137],61:70,63:71},{12:$Vv},{11:[1,138],62:73,64:74},{25:[1,139],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{23:[1,140]},{7:142,11:$V2,15:[1,141],29:$V4,31:$V5,32:10,33:$V6,34:17,39:$V7,40:$V8,41:$V9,42:$Va,43:16,44:18,45:19,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf},o($V$,[2,49]),o($V01,[2,15]),o($Vh,[2,37]),{11:$Vj,13:$Vk,23:$Vl,35:143,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:144,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:145,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:146,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:147,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:148,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:149,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:150,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:151,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:152,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:153,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:154,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:155,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:156,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:157,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:[1,158],96:58},{11:$Vj,13:$Vk,23:$Vl,35:159,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($V11,[2,104],{84:$VP}),o($V11,[2,105],{84:$VP}),{25:[1,160],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{11:$Vj,13:$Vk,23:$Vl,35:161,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:162,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VR,[2,75]),{20:$VZ,49:[1,163]},{11:[1,165],15:[1,164]},{11:$Vj,13:$Vk,23:$Vl,35:166,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{11:$Vj,13:$Vk,23:$Vl,35:167,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{16:[1,168],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VR,[2,79]),{20:$VZ,25:[1,169]},{49:[1,170],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{11:$V21,24:171,25:[1,172],27:173},{13:[1,175]},{25:[1,176],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{25:[1,177],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($V31,[2,59]),{11:$Vz,63:178},{11:$V41,18:179,66:$V51,67:$V61,68:$V71,69:$V81},{11:$Vj,13:$Vk,23:$Vl,35:185,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($V31,[2,61]),{11:$VA,64:186},{11:$V41,18:187,66:$V51,67:$V61,68:$V71,69:$V81},{11:$Vj,13:$Vk,23:$Vl,35:188,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{16:[1,189]},{11:$Vj,13:$Vk,23:$Vl,35:190,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($Vh,[2,25]),{16:[1,191],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{11:$Vj,13:$Vk,23:$Vl,35:192,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VT,$VU,{12:$VV,17:$VW,38:[2,42]}),{12:$VX,17:$VY,38:[2,43]},{13:$Vi,26:193},{11:$Vj,13:$Vk,23:$Vl,35:194,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($V$,[2,48]),o($V01,[2,14]),o($V91,[2,88],{72:$VD,73:$VE,74:$VF,75:$VG,84:$VP}),o($V91,[2,89],{72:$VD,73:$VE,74:$VF,75:$VG,84:$VP}),o($V11,[2,90],{84:$VP}),o($Va1,[2,91],{72:$VD,84:$VP}),o($Va1,[2,92],{72:$VD,84:$VP}),o($Va1,[2,93],{72:$VD,84:$VP}),o($Vb1,[2,94],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,84:$VP}),o($Vb1,[2,95],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,84:$VP}),o($Vb1,[2,96],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,84:$VP}),o($Vb1,[2,97],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,84:$VP}),o($Vc1,[2,98],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,84:$VP}),o($Vc1,[2,99],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,84:$VP}),o([11,15,16,17,20,25,49,82,83,85],[2,100],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,84:$VP}),o([11,15,16,17,20,25,49,83,85],[2,101],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,84:$VP}),o($VR,[2,102]),o($VR,[2,121]),{17:[1,195],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VR,[2,106]),{49:[1,196],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{49:[1,197],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VR,[2,76]),o($VR,[2,125]),{17:[1,198]},{16:[1,199],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{49:[1,200],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($V31,[2,60]),o($VR,[2,80]),o($Vd1,[2,41]),{20:[1,202],25:[1,201]},{13:$Vi,17:[1,203],26:204},o($Ve1,[2,21]),{17:[1,205]},o($VS,[2,10],{14:206}),{13:$Vi,26:207},{13:[1,208]},o($VT,[2,62]),o($VT,[2,65],{28:210,12:[1,209],48:$Vf1}),o($Vg1,[2,83]),o($Vg1,[2,84]),o($Vg1,[2,85]),o($Vg1,[2,86]),o($Vg1,[2,87]),o($VT,[2,66],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($VT,[2,77]),{12:[1,212],28:213,48:$Vf1},o($VT,[2,71],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($Vh,[2,24]),o($V_,[2,81],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{11:[1,216],36:214,44:215},{25:[1,217],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($Vh,[2,29]),{25:[1,218],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{11:$Vj,13:$Vk,23:$Vl,35:219,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($Vh1,[2,111]),o($Vh1,[2,112]),{11:$Vj,13:$Vk,23:$Vl,35:220,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($Vh,[2,39]),o($Vd1,[2,40]),{13:$Vi,17:[1,221],26:222},{11:$V21,27:223},{11:$V41,18:224,66:$V51,67:$V61,68:$V71,69:$V81},o($Vg,[2,19]),{11:$V41,18:225,66:$V51,67:$V61,68:$V71,69:$V81},{11:[1,227],15:[1,226]},o($Vh,[2,47],{53:228,54:[1,229]}),{57:230,59:[1,231]},{11:$Vj,13:$Vk,23:$Vl,35:232,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VT,[2,69],{12:[1,233],48:$Vi1}),{49:[1,235]},{11:$Vj,13:$Vk,23:$Vl,35:236,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{12:[1,237],48:$Vi1},{25:[1,238]},{25:[2,57]},{12:[1,239],97:$Vx,98:$Vy},{13:$Vi,26:240},{16:[1,241]},o([11,15,16,17,20,25,49],[2,103],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($VS,$Vj1,{19:242,16:$Vk1,20:$Vl1,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{11:$V41,18:245,66:$V51,67:$V61,68:$V71,69:$V81},o($Vg,[2,18]),o($Ve1,[2,20]),{13:$Vi,26:246},o($Ve1,[2,23],{28:247,48:$Vf1}),{16:[1,248]},{17:[1,249]},o($Vh,[2,44]),{13:$Vi,26:251,32:250,52:$Ve},{15:[2,56],58:252,59:[1,253],60:[1,254]},{11:$Vj,13:$Vk,23:$Vl,35:255,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($VT,[2,64],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{11:$Vj,13:$Vk,23:$Vl,35:256,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{49:[1,257]},o($Vm1,[2,74]),o($VT,[2,70],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{11:$Vj,13:$Vk,23:$Vl,35:258,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{13:$Vi,26:259},{11:$Vj,13:$Vk,23:$Vl,35:260,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},o($Vh,[2,28]),o($Vh,[2,30]),o($VS,[2,126]),o($VS,[2,11]),o($VS,[2,12]),{13:$Vi,26:261},o($Vg,[2,17]),o($Ve1,[2,22],{48:$Vi1}),o($Vg,[2,8]),{11:$V41,18:262,66:$V51,67:$V61,68:$V71,69:$V81},o($Vh,[2,45]),o($Vh,[2,46]),{15:[1,263]},{11:$Vj,13:$Vk,23:$Vl,35:264,44:45,45:56,48:$Vm,65:46,71:$Vn,86:$Vo,87:47,88:48,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:58},{17:[1,265]},{17:[1,266],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VT,[2,68],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($Vm1,[2,73]),o($VT,[2,72],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($Vh,[2,27]),{16:[1,267],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($Vg,[2,16]),o($VS,$Vj1,{19:268,16:$Vk1,20:$Vl1}),o($Vh,[2,52]),{17:[1,269],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{7:88,11:$V2,15:$Vn1,21:271,29:$V4,31:$V5,32:10,33:$V6,34:17,39:$V7,40:$V8,41:$V9,42:$Va,43:16,44:18,45:19,46:$Vb,50:$Vc,51:$Vd,52:$Ve,55:270,56:$Vf},o($Vo1,$Vn1,{32:10,43:16,34:17,44:18,45:19,7:88,21:271,55:272,11:$V2,29:$V4,31:$V5,33:$V6,39:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf}),{25:[2,58]},o($VS,[2,9]),o($Vo1,$Vn1,{32:10,43:16,34:17,44:18,45:19,7:88,21:271,55:273,11:$V2,29:$V4,31:$V5,33:$V6,39:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf}),{15:[2,55]},o($Vo1,[2,50],{32:10,43:16,34:17,44:18,45:19,7:142,11:$V2,29:$V4,31:$V5,33:$V6,39:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,50:$Vc,51:$Vd,52:$Ve,56:$Vf}),o($Vo1,[2,54]),o($Vo1,[2,53])],
defaultActions: {28:[2,1],215:[2,57],267:[2,58],270:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {errores,Error_} = require('../Reportes/Errores');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 89
break;
case 4:return 90
break;
case 5:return 91
break;
case 6:return 66
break;
case 7:return 67
break;
case 8:return 68
break;
case 9:return 92
break;
case 10:return 93
break;
case 11:return 69
break;
case 12:return 10   
break;
case 13:return 50
break;
case 14:return 51
break;
case 15:return 29
break;
case 16:return 31
break;
case 17:return 52
break;
case 18:return 54
break;
case 19:return 56
break;
case 20:return 59
break;
case 21:return 60
break;
case 22:return 39
break;
case 23:return 41
break;
case 24:return 42
break;
case 25:return 33
break;
case 26:return 22
break;
case 27:return 46
break;
case 28:return 40
break;
case 29:return 94
break;
case 30:return 95
break;
case 31:return 'PUSH'
break;
case 32:return 'POP'
break;
case 33:return 38
break;
case 34:return 97
break;
case 35:return 98
break;
case 36:return 70
break;
case 37:return 71
break;
case 38:return 72
break;
case 39:return 74
break;
case 40:return 75
break;
case 41:return 73
break;
case 42:return 78
break;
case 43:return 79
break;
case 44:return 76
break;
case 45:return 77
break;
case 46:return 80
break;
case 47:return 81
break;
case 48:return 82
break;
case 49:return 83
break;
case 50:return 86
break;
case 51:return 85
break;
case 52:return 17
break;
case 53:return 12  
break;
case 54:return 23
break;
case 55:return 25 
break;
case 56:return 13
break;
case 57:return 15
break;
case 58:return 48
break;
case 59:return 49  
break;
case 60:return 16
break;
case 61:return 20
break;
case 62:return 84
break;
case 63:return 11
break;
case 64:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^']*')))/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:null\b)/i,/^(?:length\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:of\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}