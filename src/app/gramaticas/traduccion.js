/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,23],$V2=[1,21],$V3=[1,22],$V4=[1,8],$V5=[1,9],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,20],$Vc=[1,26],$Vd=[1,27],$Ve=[1,24],$Vf=[1,25],$Vg=[2,5,10,11,22,29,31,33,40,41,42,43,47,51,52,53,57],$Vh=[2,5,10,11,15,22,29,31,33,40,41,42,43,47,51,52,53,57,60,61],$Vi=[1,35],$Vj=[1,49],$Vk=[1,59],$Vl=[1,44],$Vm=[1,50],$Vn=[1,43],$Vo=[1,42],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,57],$Vv=[1,61],$Vw=[1,64],$Vx=[1,62],$Vy=[1,63],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[11,15,16,17,20,25,50,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VQ=[11,15],$VR=[1,123],$VS=[1,125],$VT=[1,127],$VU=[20,25,50],$VV=[2,5,10,11,15,22,29,31,33,40,41,42,43,47,51,52,53,55,57,60,61],$VW=[11,15,29,31,33,40,41,42,43,47,51,52,53,57,60,61],$VX=[11,15,16,17,20,25,50,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87],$VY=[1,173],$VZ=[2,5,10,11,13,15,22,23,29,31,33,40,41,42,43,47,49,51,52,53,57,60,61,73,88,91,92,93,94,95,96],$V_=[1,182],$V$=[1,178],$V01=[1,179],$V11=[1,180],$V21=[1,181],$V31=[38,39],$V41=[11,15,16,17,20,25,50,72,73,78,79,80,81,82,83,84,85,87],$V51=[11,15,16,17,20,25,50,72,73,75,76,77,78,79,80,81,82,83,84,85,87],$V61=[11,15,16,17,20,25,50,78,79,80,81,82,83,84,85,87],$V71=[11,15,16,17,20,25,50,82,83,84,85,87],$V81=[12,49],$V91=[20,25],$Va1=[1,210],$Vb1=[11,12,13,15,16,20,25,49],$Vc1=[11,15,16,17,20,25,49,50,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$Vd1=[1,237],$Ve1=[2,13],$Vf1=[1,250],$Vg1=[1,249],$Vh1=[12,16,20,25,49],$Vi1=[2,50],$Vj1=[15,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Contenido":4,"EOF":5,"Cont":6,"Instruc":7,"Funciones":8,"Types":9,"TYPE":10,"ID":11,"=":12,"{":13,"ListTypes":14,"}":15,";":16,":":17,"Tipo":18,"Fin":19,",":20,"Instrucciones":21,"FUNCTION":22,"(":23,"Parametros":24,")":25,"InstruccionesSent":26,"OpcionParam":27,"Dim":28,"CONSOLE":29,"Expre":30,"GRAFICARTS":31,"Sentencia_if":32,"FOR":33,"Declaracion":34,"Exp":35,"Actualizacion":36,"DeclaForOF":37,"OF":38,"IN":39,"WHILE":40,"DO":41,"BREAK":42,"CONTINUE":43,"Sent_switch":44,"Unario":45,"Llamada":46,"RETURN":47,"AccesoAsig":48,"[":49,"]":50,"LET":51,"CONST":52,"IF":53,"Sentencia_else":54,"ELSE":55,"InstruccionesSwitch":56,"SWITCH":57,"Cases":58,"Default":59,"CASE":60,"DEFAULT":61,"OpcionDeclaracion":62,"OpcionDeclaracionConst":63,"NEW":64,"ARRAY":65,"Dimensiones":66,"ListaDeclaracionConst":67,"NUMBER":68,"STRING":69,"BOOLEAN":70,"VOID":71,"+":72,"-":73,"**":74,"%":75,"*":76,"/":77,">":78,"<":79,">=":80,"<=":81,"==":82,"!=":83,"&&":84,"||":85,".":86,"?":87,"!":88,"AccesoArr":89,"F":90,"NUMERO":91,"CADENA":92,"CADENA2":93,"TRUE":94,"FALSE":95,"NULL":96,"LENGTH":97,"CHARAT":98,"TOLOWERCASE":99,"TOUPPERCASE":100,"CONCAT":101,"TypesExp":102,"++":103,"--":104,"ListTypesExp":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"TYPE",11:"ID",12:"=",13:"{",15:"}",16:";",17:":",20:",",22:"FUNCTION",23:"(",25:")",29:"CONSOLE",31:"GRAFICARTS",33:"FOR",38:"OF",39:"IN",40:"WHILE",41:"DO",42:"BREAK",43:"CONTINUE",47:"RETURN",49:"[",50:"]",51:"LET",52:"CONST",53:"IF",55:"ELSE",57:"SWITCH",60:"CASE",61:"DEFAULT",64:"NEW",65:"ARRAY",68:"NUMBER",69:"STRING",70:"BOOLEAN",71:"VOID",72:"+",73:"-",74:"**",75:"%",76:"*",77:"/",78:">",79:"<",80:">=",81:"<=",82:"==",83:"!=",84:"&&",85:"||",86:".",87:"?",88:"!",91:"NUMERO",92:"CADENA",93:"CADENA2",94:"TRUE",95:"FALSE",96:"NULL",97:"LENGTH",98:"CHARAT",99:"TOLOWERCASE",100:"TOUPPERCASE",101:"CONCAT",103:"++",104:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[9,7],[14,5],[14,0],[19,1],[19,1],[19,0],[21,2],[21,1],[8,8],[8,7],[24,3],[24,1],[27,4],[27,3],[7,5],[7,4],[7,1],[7,8],[7,7],[7,7],[7,5],[7,7],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,3],[7,2],[7,5],[48,4],[48,3],[37,2],[37,2],[32,6],[54,2],[54,2],[54,0],[26,3],[26,2],[56,1],[56,0],[44,8],[58,5],[58,4],[59,3],[59,0],[36,1],[36,4],[34,3],[34,4],[34,3],[62,5],[62,3],[62,6],[62,4],[62,10],[63,5],[63,6],[63,10],[28,3],[28,2],[66,2],[66,3],[67,3],[67,1],[46,3],[46,4],[30,3],[30,1],[18,1],[18,1],[18,1],[18,1],[18,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,5],[35,2],[35,2],[35,3],[35,1],[35,1],[35,1],[35,1],[89,4],[89,4],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,3],[90,6],[90,5],[90,5],[90,6],[90,1],[45,2],[45,2],[102,3],[105,5],[105,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 14:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 15: case 78:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6:
 this.$ = $$[$0]; 
break;
case 7:
 
            //console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
            this.$= new Error_(this._$.first_line , this._$.first_column, 'Sintáctico',yytext,'');
        
break;
case 18:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 19:

            this.$ = [$$[$0]];
        
break;
case 39:

            this.$.push($$[$0-1]);
        
break;
case 40:

            this.$ =[$$[$0-1]]
        
break;
case 57:

                this.$ = new Declaracion($$[$0-3],undefined,$$[$0-1],true, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 69:

                 this.$=$$[$0-2]+1;
            
break;
case 70:

                this.$ =1;
            
break;
case 73:
 $$[$0-2].push($$[$0]); 
break;
case 74:
 this.$ = [$$[$0]]; 
break;
case 77:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 102:

        this.$ = $$[$0-1];
    
break;
case 103:
 this.$ = $$[$0]
break;
case 104:
  this.$ = $$[$0]; 
break;
case 105: case 106: case 115:

        this.$ = $$[$0];
    
break;
case 110:

        let txt=$$[$0].replace(/\\n/g,"\n");
        txt = txt.replace(/\\t/g,"\t");
        txt = txt.replace(/\\r/g,"\r");
        //this.$ = new Literal(txt.replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 111:

        let txt2=$$[$0].replace(/\\n/g,"\n");
        txt2 = txt2.replace(/\\t/g,"\t");
        txt2 = txt2.replace(/\\r/g,"\r");
        //this.$ = new Literal(txt2.replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:$V2,22:$V3,29:$V4,31:$V5,32:10,33:$V6,34:17,40:$V7,41:$V8,42:$V9,43:$Va,44:16,45:18,46:19,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,8:5,9:6,10:$V1,11:$V2,22:$V3,29:$V4,31:$V5,32:10,33:$V6,34:17,40:$V7,41:$V8,42:$V9,43:$Va,44:16,45:18,46:19,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),{23:[1,30]},{23:[1,31]},o($Vh,[2,24]),{23:[1,32]},{23:[1,33]},{13:$Vi,26:34},{16:[1,36]},{16:[1,37]},o($Vh,[2,32]),o($Vh,[2,33]),{16:[1,38]},{16:[1,39]},{11:$Vj,13:$Vk,16:[1,41],23:$Vl,35:40,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{12:$Vv,23:$Vw,48:60,49:[1,65],103:$Vx,104:$Vy},{11:[1,66]},{11:[1,67]},{23:[1,68]},{23:[1,69]},{11:[1,71],62:70},{11:[1,73],63:72},{1:[2,1]},o($Vg,[2,2]),{11:$Vj,13:$Vk,23:$Vl,30:74,35:75,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{25:[1,76]},{11:[1,80],34:77,37:78,51:[1,79],52:[1,81]},{11:$Vj,13:$Vk,23:$Vl,35:82,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{40:[1,83]},{7:86,11:$V2,15:[1,85],21:84,29:$V4,31:$V5,32:10,33:$V6,34:17,40:$V7,41:$V8,42:$V9,43:$Va,44:16,45:18,46:19,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf},o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,34]),o($Vh,[2,35]),{16:[1,87],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($Vh,[2,37]),{11:$Vj,13:$Vk,23:$Vl,35:104,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:105,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:106,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105],{49:[1,107]}),o($VP,[2,106]),o($VP,[2,114],{23:$Vw,49:[1,108],103:$Vx,104:$Vy}),{11:$Vj,13:$Vk,23:$Vl,30:110,35:75,45:45,46:56,49:$Vm,50:[1,109],66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($VP,[2,109]),o($VP,[2,110]),o($VP,[2,111]),o($VP,[2,112]),o($VP,[2,113]),o($VP,[2,115]),o($VP,[2,116]),o($VP,[2,122]),o($VQ,[2,127],{105:111}),{12:[1,112],49:[1,113]},{11:$Vj,13:$Vk,23:$Vl,35:114,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($VP,[2,123]),o($VP,[2,124]),{11:$Vj,13:$Vk,23:$Vl,25:[1,115],30:116,35:75,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:117,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{23:[1,118]},{12:[1,119]},{11:$Vj,13:$Vk,23:$Vl,35:120,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:121,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{16:[1,122]},{17:$VR},{16:[1,124]},{17:$VS},{20:$VT,25:[1,126]},o($VU,[2,78],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO}),{16:[1,128]},{11:$Vj,13:$Vk,23:$Vl,35:129,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{38:[1,130],39:[1,131]},{11:[1,132],62:70},{12:$Vv},{11:[1,133],63:72},{25:[1,134],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{23:[1,135]},{7:137,11:$V2,15:[1,136],29:$V4,31:$V5,32:10,33:$V6,34:17,40:$V7,41:$V8,42:$V9,43:$Va,44:16,45:18,46:19,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf},o($VV,[2,48]),o($VW,[2,15]),o($Vh,[2,36]),{11:$Vj,13:$Vk,23:$Vl,35:138,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:139,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:140,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:141,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:142,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:143,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:144,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:145,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:146,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:147,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:148,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:149,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:150,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:151,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:152,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:[1,153],98:[1,154],99:[1,155],100:[1,156],101:[1,157],102:58},{11:$Vj,13:$Vk,23:$Vl,35:158,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($VX,[2,100],{86:$VN}),o($VX,[2,101],{86:$VN}),{25:[1,159],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{11:$Vj,13:$Vk,23:$Vl,35:160,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:161,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($VP,[2,71]),{20:$VT,50:[1,162]},{11:[1,164],15:[1,163]},{11:$Vj,13:$Vk,23:$Vl,35:165,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:166,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{16:[1,167],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($VP,[2,75]),{20:$VT,25:[1,168]},{50:[1,169],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{11:$VY,24:170,25:[1,171],27:172},{13:[1,174]},{25:[1,175],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{25:[1,176],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($VZ,[2,58]),{11:$V_,18:177,68:$V$,69:$V01,70:$V11,71:$V21},o($VZ,[2,60]),{11:$V_,18:183,68:$V$,69:$V01,70:$V11,71:$V21},{16:[1,184]},{11:$Vj,13:$Vk,23:$Vl,35:185,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($Vh,[2,23]),{16:[1,186],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{11:$Vj,13:$Vk,23:$Vl,35:187,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:188,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($V31,[2,41],{17:$VR}),o($V31,[2,42],{17:$VS}),{13:$Vi,26:189},{11:$Vj,13:$Vk,23:$Vl,35:190,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($VV,[2,47]),o($VW,[2,14]),o($V41,[2,84],{74:$VB,75:$VC,76:$VD,77:$VE,86:$VN}),o($V41,[2,85],{74:$VB,75:$VC,76:$VD,77:$VE,86:$VN}),o($VX,[2,86],{86:$VN}),o($V51,[2,87],{74:$VB,86:$VN}),o($V51,[2,88],{74:$VB,86:$VN}),o($V51,[2,89],{74:$VB,86:$VN}),o($V61,[2,90],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,86:$VN}),o($V61,[2,91],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,86:$VN}),o($V61,[2,92],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,86:$VN}),o($V61,[2,93],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,86:$VN}),o($V71,[2,94],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,86:$VN}),o($V71,[2,95],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,86:$VN}),o([11,15,16,17,20,25,50,84,85,87],[2,96],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,86:$VN}),o([11,15,16,17,20,25,50,85,87],[2,97],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,86:$VN}),o($VP,[2,98]),o($VP,[2,117]),{23:[1,191]},{23:[1,192]},{23:[1,193]},{23:[1,194]},{17:[1,195],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($VP,[2,102]),{50:[1,196],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{50:[1,197],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($VP,[2,72]),o($VP,[2,125]),{17:[1,198]},{16:[1,199],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{50:[1,200],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($VZ,[2,59]),o($VP,[2,76]),o($V81,[2,40]),{20:[1,202],25:[1,201]},{17:[1,203]},o($V91,[2,19]),{17:[1,204]},o($VQ,[2,10],{14:205}),{13:$Vi,26:206},{13:[1,207]},{12:[1,208],16:[2,62],28:209,49:$Va1},o($Vb1,[2,79]),o($Vb1,[2,80]),o($Vb1,[2,81]),o($Vb1,[2,82]),o($Vb1,[2,83]),{12:[1,211],28:212,49:$Va1},o($Vh,[2,22]),o($VU,[2,77],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO}),{11:[1,215],36:213,45:214},{25:[1,216],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{25:[1,217],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($Vh,[2,28]),{25:[1,218],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{11:$Vj,13:$Vk,23:$Vl,35:219,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{25:[1,220]},{25:[1,221]},{11:$Vj,13:$Vk,23:$Vl,35:222,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:223,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($Vc1,[2,107]),o($Vc1,[2,108]),{11:$Vj,13:$Vk,23:$Vl,35:224,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($Vh,[2,38]),o($V81,[2,39]),{17:[1,225]},{11:$VY,27:226},{11:$V_,18:227,68:$V$,69:$V01,70:$V11,71:$V21},{11:$V_,18:228,68:$V$,69:$V01,70:$V11,71:$V21},{11:[1,230],15:[1,229]},o($Vh,[2,46],{54:231,55:[1,232]}),{58:233,60:[1,234]},{11:$Vj,13:$Vk,23:$Vl,35:235,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{12:[1,236],16:[2,64],49:$Vd1},{50:[1,238]},{11:$Vj,13:$Vk,23:$Vl,35:239,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{12:[1,240],49:$Vd1},{25:[1,241]},{25:[2,56]},{12:[1,242],103:$Vx,104:$Vy},{13:$Vi,26:243},{13:$Vi,26:244},{16:[1,245]},{25:[1,246],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($VP,[2,119]),o($VP,[2,120]),{25:[1,247],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o([11,15,16,17,20,25,50],[2,99],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO}),o($VQ,$Ve1,{19:248,16:$Vf1,20:$Vg1,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO}),{11:$V_,18:251,68:$V$,69:$V01,70:$V11,71:$V21},o($V91,[2,18]),{13:$Vi,26:252},o($V91,[2,21],{28:253,49:$Va1}),{16:[1,254]},{17:[1,255]},o($Vh,[2,43]),{13:$Vi,26:257,32:256,53:$Ve},{15:[2,55],59:258,60:[1,259],61:[1,260]},{11:$Vj,13:$Vk,23:$Vl,35:261,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{16:[2,61],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{11:$Vj,13:$Vk,23:$Vl,35:262,45:45,46:56,49:$Vm,64:[1,263],66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{50:[1,264]},o($Vh1,[2,70]),{16:[2,66],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{11:$Vj,13:$Vk,23:$Vl,35:265,45:45,46:56,49:$Vm,64:[1,266],66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{13:$Vi,26:267},{11:$Vj,13:$Vk,23:$Vl,35:268,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,29]),o($VP,[2,118]),o($VP,[2,121]),o($VQ,[2,126]),o($VQ,[2,11]),o($VQ,[2,12]),{13:$Vi,26:269},o($Vg,[2,17]),o($V91,[2,20],{49:$Vd1}),o($Vg,[2,8]),{11:$V_,18:270,68:$V$,69:$V01,70:$V11,71:$V21},o($Vh,[2,44]),o($Vh,[2,45]),{15:[1,271]},{11:$Vj,13:$Vk,23:$Vl,35:272,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{17:[1,273]},{17:[1,274],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{16:[2,63],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{65:[1,275]},o($Vh1,[2,69]),{16:[2,67],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{65:[1,276]},o($Vh,[2,25]),{16:[1,277],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},o($Vg,[2,16]),o($VQ,$Ve1,{19:278,16:$Vf1,20:$Vg1}),o($Vh,[2,51]),{17:[1,279],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{7:86,11:$V2,15:$Vi1,21:281,29:$V4,31:$V5,32:10,33:$V6,34:17,40:$V7,41:$V8,42:$V9,43:$Va,44:16,45:18,46:19,47:$Vb,51:$Vc,52:$Vd,53:$Ve,56:280,57:$Vf},o($Vj1,$Vi1,{32:10,44:16,34:17,45:18,46:19,7:86,21:281,56:282,11:$V2,29:$V4,31:$V5,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf}),{23:[1,283]},{23:[1,284]},{25:[2,57]},o($VQ,[2,9]),o($Vj1,$Vi1,{32:10,44:16,34:17,45:18,46:19,7:86,21:281,56:285,11:$V2,29:$V4,31:$V5,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf}),{15:[2,54]},o($Vj1,[2,49],{32:10,44:16,34:17,45:18,46:19,7:137,11:$V2,29:$V4,31:$V5,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,47:$Vb,51:$Vc,52:$Vd,53:$Ve,57:$Vf}),o($Vj1,[2,53]),{11:$Vj,13:$Vk,23:$Vl,35:286,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},{11:$Vj,13:$Vk,23:$Vl,35:287,45:45,46:56,49:$Vm,66:46,73:$Vn,88:$Vo,89:47,90:48,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,102:58},o($Vj1,[2,52]),{25:[1,288],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{25:[1,289],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO},{16:[2,65]},{16:[2,68]}],
defaultActions: {28:[2,1],214:[2,56],277:[2,57],280:[2,54],288:[2,65],289:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {errores,Error_} = require('../Reportes/Errores');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 91
break;
case 4:return 92
break;
case 5:return 93
break;
case 6:return 68
break;
case 7:return 69
break;
case 8:return 70
break;
case 9:return 94
break;
case 10:return 95
break;
case 11:return 71
break;
case 12:return 10   
break;
case 13:return 51
break;
case 14:return 52
break;
case 15:return 29
break;
case 16:return 53
break;
case 17:return 55
break;
case 18:return 57
break;
case 19:return 60
break;
case 20:return 61
break;
case 21:return 40
break;
case 22:return 42
break;
case 23:return 43
break;
case 24:return 33
break;
case 25:return 22
break;
case 26:return 47
break;
case 27:return 41
break;
case 28:return 96
break;
case 29:return 97
break;
case 30:return 98
break;
case 31:return 99
break;
case 32:return 100
break;
case 33:return 101
break;
case 34:return 38
break;
case 35:return 39
break;
case 36:return 64
break;
case 37:return 65
break;
case 38:return 103
break;
case 39:return 104
break;
case 40:return 72
break;
case 41:return 73
break;
case 42:return 74
break;
case 43:return 76
break;
case 44:return 77
break;
case 45:return 75
break;
case 46:return 80
break;
case 47:return 81
break;
case 48:return 78
break;
case 49:return 79
break;
case 50:return 82
break;
case 51:return 83
break;
case 52:return 84
break;
case 53:return 85
break;
case 54:return 88
break;
case 55:return 87
break;
case 56:return 17
break;
case 57:return 12  
break;
case 58:return 23
break;
case 59:return 25 
break;
case 60:return 13
break;
case 61:return 15
break;
case 62:return 49
break;
case 63:return 50  
break;
case 64:return 16
break;
case 65:return 20
break;
case 66:return 86
break;
case 67:return 11
break;
case 68:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^']*')))/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\.log\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:null\b)/i,/^(?:length\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}