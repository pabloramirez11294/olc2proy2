/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,22],$V2=[1,20],$V3=[1,21],$V4=[1,8],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,19],$Vb=[1,25],$Vc=[1,26],$Vd=[1,23],$Ve=[1,24],$Vf=[2,5,10,11,22,29,32,39,40,41,42,46,50,51,52,56],$Vg=[2,5,10,11,15,22,29,32,39,40,41,42,46,50,51,52,56,59,60],$Vh=[1,33],$Vi=[1,47],$Vj=[1,56],$Vk=[1,42],$Vl=[1,48],$Vm=[1,41],$Vn=[1,40],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,54],$Vt=[1,58],$Vu=[1,61],$Vv=[1,59],$Vw=[1,60],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[11,15,16,17,20,25,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],$VO=[11,15],$VP=[1,119],$VQ=[1,121],$VR=[1,123],$VS=[20,25,49],$VT=[2,5,10,11,15,22,29,32,39,40,41,42,46,50,51,52,54,56,59,60],$VU=[11,15,29,32,39,40,41,42,46,50,51,52,56,59,60],$VV=[11,15,16,17,20,25,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85],$VW=[1,168],$VX=[2,5,10,11,13,15,22,23,29,32,39,40,41,42,46,48,50,51,52,56,59,60,71,86,89,90,91,92,93],$VY=[1,177],$VZ=[1,173],$V_=[1,174],$V$=[1,175],$V01=[1,176],$V11=[37,38],$V21=[11,15,16,17,20,25,49,70,71,76,77,78,79,80,81,82,83,85],$V31=[11,15,16,17,20,25,49,70,71,73,74,75,76,77,78,79,80,81,82,83,85],$V41=[11,15,16,17,20,25,49,76,77,78,79,80,81,82,83,85],$V51=[11,15,16,17,20,25,49,80,81,82,83,85],$V61=[12,48],$V71=[20,25],$V81=[1,205],$V91=[11,12,13,15,16,20,25,48],$Va1=[11,15,16,17,20,25,48,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],$Vb1=[1,232],$Vc1=[2,13],$Vd1=[1,245],$Ve1=[1,244],$Vf1=[12,16,20,25,48],$Vg1=[2,49],$Vh1=[15,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Contenido":4,"EOF":5,"Cont":6,"Instruc":7,"Funciones":8,"Types":9,"TYPE":10,"ID":11,"=":12,"{":13,"ListTypes":14,"}":15,";":16,":":17,"Tipo":18,"Fin":19,",":20,"Instrucciones":21,"FUNCTION":22,"(":23,"Parametros":24,")":25,"InstruccionesSent":26,"OpcionParam":27,"Dim":28,"CONSOLE":29,"Expre":30,"Sentencia_if":31,"FOR":32,"Declaracion":33,"Exp":34,"Actualizacion":35,"DeclaForOF":36,"OF":37,"IN":38,"WHILE":39,"DO":40,"BREAK":41,"CONTINUE":42,"Sent_switch":43,"Unario":44,"Llamada":45,"RETURN":46,"AccesoAsig":47,"[":48,"]":49,"LET":50,"CONST":51,"IF":52,"Sentencia_else":53,"ELSE":54,"InstruccionesSwitch":55,"SWITCH":56,"Cases":57,"Default":58,"CASE":59,"DEFAULT":60,"OpcionDeclaracion":61,"OpcionDeclaracionConst":62,"NEW":63,"ARRAY":64,"Dimensiones":65,"NUMBER":66,"STRING":67,"BOOLEAN":68,"VOID":69,"+":70,"-":71,"**":72,"%":73,"*":74,"/":75,">":76,"<":77,">=":78,"<=":79,"==":80,"!=":81,"&&":82,"||":83,".":84,"?":85,"!":86,"AccesoArr":87,"F":88,"NUMERO":89,"CADENA":90,"TRUE":91,"FALSE":92,"NULL":93,"LENGTH":94,"CHARAT":95,"TOLOWERCASE":96,"TOUPPERCASE":97,"CONCAT":98,"TypesExp":99,"++":100,"--":101,"ListTypesExp":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"TYPE",11:"ID",12:"=",13:"{",15:"}",16:";",17:":",20:",",22:"FUNCTION",23:"(",25:")",29:"CONSOLE",32:"FOR",37:"OF",38:"IN",39:"WHILE",40:"DO",41:"BREAK",42:"CONTINUE",46:"RETURN",48:"[",49:"]",50:"LET",51:"CONST",52:"IF",54:"ELSE",56:"SWITCH",59:"CASE",60:"DEFAULT",63:"NEW",64:"ARRAY",66:"NUMBER",67:"STRING",68:"BOOLEAN",69:"VOID",70:"+",71:"-",72:"**",73:"%",74:"*",75:"/",76:">",77:"<",78:">=",79:"<=",80:"==",81:"!=",82:"&&",83:"||",84:".",85:"?",86:"!",89:"NUMERO",90:"CADENA",91:"TRUE",92:"FALSE",93:"NULL",94:"LENGTH",95:"CHARAT",96:"TOLOWERCASE",97:"TOUPPERCASE",98:"CONCAT",100:"++",101:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[9,7],[14,5],[14,0],[19,1],[19,1],[19,0],[21,2],[21,1],[8,8],[8,7],[24,3],[24,1],[27,4],[27,3],[7,5],[7,1],[7,8],[7,7],[7,7],[7,5],[7,7],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,3],[7,2],[7,5],[47,4],[47,3],[36,2],[36,2],[31,6],[53,2],[53,2],[53,0],[26,3],[26,2],[55,1],[55,0],[43,8],[57,5],[57,4],[58,3],[58,0],[35,1],[35,4],[33,3],[33,4],[33,3],[61,5],[61,3],[61,6],[61,4],[61,10],[62,5],[62,6],[62,10],[28,3],[28,2],[65,2],[65,3],[45,3],[45,4],[30,3],[30,1],[18,1],[18,1],[18,1],[18,1],[18,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,5],[34,2],[34,2],[34,3],[34,1],[34,1],[34,1],[34,1],[87,4],[87,4],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,3],[88,6],[88,5],[88,5],[88,6],[88,1],[44,2],[44,2],[99,3],[102,5],[102,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 14:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 15: case 75:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 31: case 53: case 102:
 this.$ = $$[$0]; 
break;
case 7:
 
            //console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
            this.$= new Error_(this._$.first_line , this._$.first_column, 'Sintáctico',yytext,'');
        
break;
case 18:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 19:

            this.$ = [$$[$0]];
        
break;
case 22:
 this.$ = new Console($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 23: case 101: case 103:
  this.$ = $$[$0]; 
break;
case 27:
this.$ = new While($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 28:
this.$ = new DoWhile($$[$0-2],$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 29:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 30:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 35:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36:
 this.$ = new Return(undefined,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 38:

            this.$.push($$[$0-1]);
        
break;
case 39:

            this.$ =[$$[$0-1]]
        
break;
case 42:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 43: case 44:
 this.$ = $$[$0];
break;
case 45:
 this.$ = null;
break;
case 46:
this.$ = new Instrucciones($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 47:
 this.$ = new Instrucciones(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 48:
this.$ = new Instrucciones($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 49:
this.$ = new Instrucciones(new Array(), _$[$0].first_line, _$[$0].first_column);
break;
case 50:
this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 51:
this.$.set($$[$0-2],$$[$0]); 
break;
case 52:
 let a = new Map();  this.$ = a.set($$[$0-2],$$[$0]);
break;
case 68:

                 this.$=$$[$0-2]+1;
            
break;
case 69:

                this.$ =1;
            
break;
case 74:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 81:
 this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.SUMA, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 82:
 this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.RESTA, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 83:
 this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 84:
 this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.MODULO, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 85:
 this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.MULT, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 86:
 this.$ = new Aritmetico($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 87:
 this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
 this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
 this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
 this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
 this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$ = new Relacional($$[$0-2], $$[$0],RelationalOption.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$ = new Logica($$[$0-2], $$[$0],LogicaOpcion.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94:
 this.$ = new Logica($$[$0-2], $$[$0],LogicaOpcion.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
 this.$ = new Logica($$[$0],null,LogicaOpcion.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new Aritmetico($$[$0],null, ArithmeticOption.RESTA, _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 99:
 this.$ = $$[$0-1]; 
break;
case 100:
 this.$ = $$[$0]
break;
case 106:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER); 
break;
case 107:

        let txt=$$[$0].replace(/\\n/g,"\n");
        txt = txt.replace(/\\t/g,"\t");
        txt = txt.replace(/\\r/g,"\r");
        //this.$ = new Literal(txt.replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Type.STRING);
    
break;
case 111:

        this.$ = $$[$0];
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:$V2,22:$V3,29:$V4,31:9,32:$V5,33:16,39:$V6,40:$V7,41:$V8,42:$V9,43:15,44:17,45:18,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,8:5,9:6,10:$V1,11:$V2,22:$V3,29:$V4,31:9,32:$V5,33:16,39:$V6,40:$V7,41:$V8,42:$V9,43:15,44:17,45:18,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),{23:[1,29]},o($Vg,[2,23]),{23:[1,30]},{23:[1,31]},{13:$Vh,26:32},{16:[1,34]},{16:[1,35]},o($Vg,[2,31]),o($Vg,[2,32]),{16:[1,36]},{16:[1,37]},{11:$Vi,13:$Vj,16:[1,39],23:$Vk,34:38,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{12:$Vt,23:$Vu,47:57,48:[1,62],100:$Vv,101:$Vw},{11:[1,63]},{11:[1,64]},{23:[1,65]},{23:[1,66]},{11:[1,68],61:67},{11:[1,70],62:69},{1:[2,1]},o($Vf,[2,2]),{11:$Vi,13:$Vj,23:$Vk,30:71,34:72,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:[1,76],33:73,36:74,50:[1,75],51:[1,77]},{11:$Vi,13:$Vj,23:$Vk,34:78,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{39:[1,79]},{7:82,11:$V2,15:[1,81],21:80,29:$V4,31:9,32:$V5,33:16,39:$V6,40:$V7,41:$V8,42:$V9,43:15,44:17,45:18,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve},o($Vg,[2,29]),o($Vg,[2,30]),o($Vg,[2,33]),o($Vg,[2,34]),{16:[1,83],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($Vg,[2,36]),{11:$Vi,13:$Vj,23:$Vk,34:100,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:101,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:102,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,102],{48:[1,103]}),o($VN,[2,103]),o($VN,[2,110],{23:$Vu,48:[1,104],100:$Vv,101:$Vw}),{11:$Vi,13:$Vj,23:$Vk,30:106,34:72,44:43,45:53,48:$Vl,49:[1,105],65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,111]),o($VN,[2,112]),o($VN,[2,118]),o($VO,[2,123],{102:107}),{12:[1,108],48:[1,109]},{11:$Vi,13:$Vj,23:$Vk,34:110,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($VN,[2,119]),o($VN,[2,120]),{11:$Vi,13:$Vj,23:$Vk,25:[1,111],30:112,34:72,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:113,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{23:[1,114]},{12:[1,115]},{11:$Vi,13:$Vj,23:$Vk,34:116,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:117,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{16:[1,118]},{17:$VP},{16:[1,120]},{17:$VQ},{20:$VR,25:[1,122]},o($VS,[2,75],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),{11:$Vi,13:$Vj,23:$Vk,34:124,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{37:[1,125],38:[1,126]},{11:[1,127],61:67},{12:$Vt},{11:[1,128],62:69},{25:[1,129],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{23:[1,130]},{7:132,11:$V2,15:[1,131],29:$V4,31:9,32:$V5,33:16,39:$V6,40:$V7,41:$V8,42:$V9,43:15,44:17,45:18,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve},o($VT,[2,47]),o($VU,[2,15]),o($Vg,[2,35]),{11:$Vi,13:$Vj,23:$Vk,34:133,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:134,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:135,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:136,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:137,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:138,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:139,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:140,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:141,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:142,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:143,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:144,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:145,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:146,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:147,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:[1,148],95:[1,149],96:[1,150],97:[1,151],98:[1,152],99:55},{11:$Vi,13:$Vj,23:$Vk,34:153,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($VV,[2,97],{84:$VL}),o($VV,[2,98],{84:$VL}),{25:[1,154],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{11:$Vi,13:$Vj,23:$Vk,34:155,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:156,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($VN,[2,70]),{20:$VR,49:[1,157]},{11:[1,159],15:[1,158]},{11:$Vi,13:$Vj,23:$Vk,34:160,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:161,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{16:[1,162],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($VN,[2,72]),{20:$VR,25:[1,163]},{49:[1,164],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{11:$VW,24:165,25:[1,166],27:167},{13:[1,169]},{25:[1,170],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{25:[1,171],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($VX,[2,57]),{11:$VY,18:172,66:$VZ,67:$V_,68:$V$,69:$V01},o($VX,[2,59]),{11:$VY,18:178,66:$VZ,67:$V_,68:$V$,69:$V01},{16:[1,179]},{11:$Vi,13:$Vj,23:$Vk,34:180,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{16:[1,181],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{11:$Vi,13:$Vj,23:$Vk,34:182,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:183,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($V11,[2,40],{17:$VP}),o($V11,[2,41],{17:$VQ}),{13:$Vh,26:184},{11:$Vi,13:$Vj,23:$Vk,34:185,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($VT,[2,46]),o($VU,[2,14]),o($V21,[2,81],{72:$Vz,73:$VA,74:$VB,75:$VC,84:$VL}),o($V21,[2,82],{72:$Vz,73:$VA,74:$VB,75:$VC,84:$VL}),o($VV,[2,83],{84:$VL}),o($V31,[2,84],{72:$Vz,84:$VL}),o($V31,[2,85],{72:$Vz,84:$VL}),o($V31,[2,86],{72:$Vz,84:$VL}),o($V41,[2,87],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,84:$VL}),o($V41,[2,88],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,84:$VL}),o($V41,[2,89],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,84:$VL}),o($V41,[2,90],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,84:$VL}),o($V51,[2,91],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,84:$VL}),o($V51,[2,92],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,84:$VL}),o([11,15,16,17,20,25,49,82,83,85],[2,93],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,84:$VL}),o([11,15,16,17,20,25,49,83,85],[2,94],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,84:$VL}),o($VN,[2,95]),o($VN,[2,113]),{23:[1,186]},{23:[1,187]},{23:[1,188]},{23:[1,189]},{17:[1,190],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($VN,[2,99]),{49:[1,191],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{49:[1,192],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($VN,[2,71]),o($VN,[2,121]),{17:[1,193]},{16:[1,194],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{49:[1,195],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($VX,[2,58]),o($VN,[2,73]),o($V61,[2,39]),{20:[1,197],25:[1,196]},{17:[1,198]},o($V71,[2,19]),{17:[1,199]},o($VO,[2,10],{14:200}),{13:$Vh,26:201},{13:[1,202]},{12:[1,203],16:[2,61],28:204,48:$V81},o($V91,[2,76]),o($V91,[2,77]),o($V91,[2,78]),o($V91,[2,79]),o($V91,[2,80]),{12:[1,206],28:207,48:$V81},o($Vg,[2,22]),o($VS,[2,74],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),{11:[1,210],35:208,44:209},{25:[1,211],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{25:[1,212],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($Vg,[2,27]),{25:[1,213],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{11:$Vi,13:$Vj,23:$Vk,34:214,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{25:[1,215]},{25:[1,216]},{11:$Vi,13:$Vj,23:$Vk,34:217,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:218,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($Va1,[2,104]),o($Va1,[2,105]),{11:$Vi,13:$Vj,23:$Vk,34:219,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($Vg,[2,37]),o($V61,[2,38]),{17:[1,220]},{11:$VW,27:221},{11:$VY,18:222,66:$VZ,67:$V_,68:$V$,69:$V01},{11:$VY,18:223,66:$VZ,67:$V_,68:$V$,69:$V01},{11:[1,225],15:[1,224]},o($Vg,[2,45],{53:226,54:[1,227]}),{57:228,59:[1,229]},{11:$Vi,13:$Vj,23:$Vk,34:230,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{12:[1,231],16:[2,63],48:$Vb1},{49:[1,233]},{11:$Vi,13:$Vj,23:$Vk,34:234,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{12:[1,235],48:$Vb1},{25:[1,236]},{25:[2,55]},{12:[1,237],100:$Vv,101:$Vw},{13:$Vh,26:238},{13:$Vh,26:239},{16:[1,240]},{25:[1,241],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($VN,[2,115]),o($VN,[2,116]),{25:[1,242],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o([11,15,16,17,20,25,49],[2,96],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($VO,$Vc1,{19:243,16:$Vd1,20:$Ve1,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),{11:$VY,18:246,66:$VZ,67:$V_,68:$V$,69:$V01},o($V71,[2,18]),{13:$Vh,26:247},o($V71,[2,21],{28:248,48:$V81}),{16:[1,249]},{17:[1,250]},o($Vg,[2,42]),{13:$Vh,26:252,31:251,52:$Vd},{15:[2,54],58:253,59:[1,254],60:[1,255]},{11:$Vi,13:$Vj,23:$Vk,34:256,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{16:[2,60],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{11:$Vi,13:$Vj,23:$Vk,34:257,44:43,45:53,48:$Vl,63:[1,258],65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{49:[1,259]},o($Vf1,[2,69]),{16:[2,65],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{11:$Vi,13:$Vj,23:$Vk,34:260,44:43,45:53,48:$Vl,63:[1,261],65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{13:$Vh,26:262},{11:$Vi,13:$Vj,23:$Vk,34:263,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($Vg,[2,25]),o($Vg,[2,26]),o($Vg,[2,28]),o($VN,[2,114]),o($VN,[2,117]),o($VO,[2,122]),o($VO,[2,11]),o($VO,[2,12]),{13:$Vh,26:264},o($Vf,[2,17]),o($V71,[2,20],{48:$Vb1}),o($Vf,[2,8]),{11:$VY,18:265,66:$VZ,67:$V_,68:$V$,69:$V01},o($Vg,[2,43]),o($Vg,[2,44]),{15:[1,266]},{11:$Vi,13:$Vj,23:$Vk,34:267,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{17:[1,268]},{17:[1,269],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{16:[2,62],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{64:[1,270]},o($Vf1,[2,68]),{16:[2,66],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{64:[1,271]},o($Vg,[2,24]),{16:[1,272],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($Vf,[2,16]),o($VO,$Vc1,{19:273,16:$Vd1,20:$Ve1}),o($Vg,[2,50]),{17:[1,274],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{7:82,11:$V2,15:$Vg1,21:276,29:$V4,31:9,32:$V5,33:16,39:$V6,40:$V7,41:$V8,42:$V9,43:15,44:17,45:18,46:$Va,50:$Vb,51:$Vc,52:$Vd,55:275,56:$Ve},o($Vh1,$Vg1,{31:9,43:15,33:16,44:17,45:18,7:82,21:276,55:277,11:$V2,29:$V4,32:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve}),{23:[1,278]},{23:[1,279]},{25:[2,56]},o($VO,[2,9]),o($Vh1,$Vg1,{31:9,43:15,33:16,44:17,45:18,7:82,21:276,55:280,11:$V2,29:$V4,32:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve}),{15:[2,53]},o($Vh1,[2,48],{31:9,43:15,33:16,44:17,45:18,7:132,11:$V2,29:$V4,32:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,50:$Vb,51:$Vc,52:$Vd,56:$Ve}),o($Vh1,[2,52]),{11:$Vi,13:$Vj,23:$Vk,34:281,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},{11:$Vi,13:$Vj,23:$Vk,34:282,44:43,45:53,48:$Vl,65:44,71:$Vm,86:$Vn,87:45,88:46,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,99:55},o($Vh1,[2,51]),{25:[1,283],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{25:[1,284],70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{16:[2,64]},{16:[2,67]}],
defaultActions: {27:[2,1],209:[2,55],272:[2,56],275:[2,53],283:[2,64],284:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {errores,Error_} = require('../Reportes/Errores');    
    const { Type } = require("../Modelos/Retorno");
    //expresiones
    const { ArithmeticOption,Aritmetico} = require('../Expresiones/Aritmetico');
    const {Relacional, RelationalOption} = require('../Expresiones/Relacional');
    const {Logica, LogicaOpcion} = require('../Expresiones/Logica');
    const {Literal} = require('../Expresiones/Literal');
    const {Variable} = require('../Expresiones/Variable');
    const {Unario,OperadorOpcion} = require('../Expresiones/Unario');
    const {Ternario} = require('../Expresiones/Ternario');
    const {AsigArreglo} = require('../Expresiones/AsigArreglo');
    //instrucciones
    const {Instrucciones} = require('../Instruccion/Instrucciones');
    //sentencias de control
    const {Console} = require('../Instruccion/Console');
    const {If} = require('../Instruccion/If');
    const {Switch} = require('../Instruccion/Switch');    
    const {Break,Continue,TipoEscape} = require('../Instruccion/BreakContinue');
    const {While,DoWhile} = require('../Instruccion/While');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 89
break;
case 4:return 90
break;
case 5:return 66
break;
case 6:return 67
break;
case 7:return 68
break;
case 8:return 91
break;
case 9:return 92
break;
case 10:return 69
break;
case 11:return 10   
break;
case 12:return 50
break;
case 13:return 51
break;
case 14:return 29
break;
case 15:return 52
break;
case 16:return 54
break;
case 17:return 56
break;
case 18:return 59
break;
case 19:return 60
break;
case 20:return 39
break;
case 21:return 41
break;
case 22:return 42
break;
case 23:return 32
break;
case 24:return 22
break;
case 25:return 46
break;
case 26:return 40
break;
case 27:return 93
break;
case 28:return 94
break;
case 29:return 95
break;
case 30:return 96
break;
case 31:return 97
break;
case 32:return 98
break;
case 33:return 37
break;
case 34:return 38
break;
case 35:return 63
break;
case 36:return 64
break;
case 37:return 100
break;
case 38:return 101
break;
case 39:return 70
break;
case 40:return 71
break;
case 41:return 72
break;
case 42:return 74
break;
case 43:return 75
break;
case 44:return 73
break;
case 45:return 78
break;
case 46:return 79
break;
case 47:return 76
break;
case 48:return 77
break;
case 49:return 80
break;
case 50:return 81
break;
case 51:return 82
break;
case 52:return 83
break;
case 53:return 86
break;
case 54:return 85
break;
case 55:return 17
break;
case 56:return 12  
break;
case 57:return 23
break;
case 58:return 25 
break;
case 59:return 13
break;
case 60:return 15
break;
case 61:return 48
break;
case 62:return 49  
break;
case 63:return 16
break;
case 64:return 20
break;
case 65:return 84
break;
case 66:return 11
break;
case 67:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:(("[^"]*")))/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\.log\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:null\b)/i,/^(?:length\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}